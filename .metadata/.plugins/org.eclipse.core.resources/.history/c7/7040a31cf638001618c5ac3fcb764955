package com.johan.xnote.core.presenter;

import java.util.Calendar;

import com.johan.xnote.api.model.Sticky;
import com.johan.xnote.api.model.StickyDao;
import com.johan.xnote.app.api.IWriteSticky;
import com.johan.xnote.app.application.XNoteApplication;
import com.johan.xnote.core.util.CoreUtil;

public class WriteStickyPresenter extends BasePresenter {
	
	private IWriteSticky writeSticky;
	
	public WriteStickyPresenter(IWriteSticky writeSticky) {
		this.writeSticky = writeSticky;
	}

	public String getCurrentTime() {
		// TODO Auto-generated method stub
		return CoreUtil.getNowTime("yyyy-MM-dd HH:mm");
	}
	
	public void save(String editTime, String content, String remindDate, String remindTime, boolean isRemind) {
		if(isRemind) {
			if(CoreUtil.hasEmpty(editTime, content, remindDate, remindTime)) {
				writeSticky.toast("内容、提醒时间不能为空~");
				return;
			}
		} else {
			if(CoreUtil.hasEmpty(editTime, content)) {
				writeSticky.toast("内容不能为空~");
				return;
			}
		}
		// 编辑时间，只拿时间
		editTime = editTime.substring(5);
		long remindMillis = 0;
		if(isRemind) {
			int[] dates = parseDate(remindDate);
			int[] times = parseTime(remindTime);
			Calendar calendar = Calendar.getInstance();
			calendar.set(dates[0], dates[1] - 1, dates[2], times[0], times[1]);
			remindMillis = calendar.getTimeInMillis();
			if(System.currentTimeMillis() < remindMillis) {
				if(remindMillis - System.currentTimeMillis() < 60 * 60 * 1000) {
					int remainMinute = (int)((remindMillis - System.currentTimeMillis()) / 60000);
					writeSticky.toast("还剩" + remainMinute + "分钟提醒您");
				} else {
					writeSticky.toast("将在" + remindDate + " " + remindTime + "提醒您");
				}
			} else {
				writeSticky.toast("提醒已过期");
				isRemind = false;
			}
		}
		//保存
		StickyDao stickyDao = XNoteApplication.getInstance().getDaoSession().getStickyDao();
		Sticky sticky = new Sticky(null, editTime, content, isRemind, remindMillis, "#00000000");
		long id = stickyDao.insert(sticky);
		if(id != -1) {
			writeSticky.saveStickySuccess();
			if(isRemind) {
				// 启动定时器
				writeSticky.setRemindAlarm(id, remindMillis);
			}
		} else {
			writeSticky.saveStickyFail();
		}
	}
	
	private int[] parseDate(String date) {
		int[] dates = new int[3];
		if(date.indexOf("-") != -1) {
			String[] dateArr = date.split("-");
			if(null != dateArr && dateArr.length == 3) {
				dates[0] = Integer.parseInt(dateArr[0]);
				dates[1] = Integer.parseInt(dateArr[1]);
				dates[2] = Integer.parseInt(dateArr[2]);
			}
		}
		return dates;
	}
	
	private int[] parseTime(String time) {
		int[] times = new int[2];
		if(time.indexOf(":") != -1) {
			String[] timeArr = time.split(":");
			if(null != timeArr && timeArr.length == 2) {
				times[0] = Integer.parseInt(timeArr[0]);
				times[1] = Integer.parseInt(timeArr[1]);
			}
		}
		return times;
	}

}

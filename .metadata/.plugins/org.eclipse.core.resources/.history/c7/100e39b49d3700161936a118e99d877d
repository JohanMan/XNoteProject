package com.johan.xnote.api.model;

import com.johan.xnote.api.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "ACCOUNT".
 */
public class Account {

    private Long accountId;
    private int year;
    private int month;
    private int day;
    /** Not-null value. */
    private String time;
    private float money;
    /** Not-null value. */
    private String remark;
    private Long typeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AccountDao myDao;

    private AccountType accountType;
    private Long accountType__resolvedKey;


    public Account() {
    }

    public Account(Long accountId) {
        this.accountId = accountId;
    }

    public Account(Long accountId, int year, int month, int day, String time, float money, String remark, Long typeId) {
        this.accountId = accountId;
        this.year = year;
        this.month = month;
        this.day = day;
        this.time = time;
        this.money = money;
        this.remark = remark;
        this.typeId = typeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAccountDao() : null;
    }

    public Long getAccountId() {
        return accountId;
    }

    public void setAccountId(Long accountId) {
        this.accountId = accountId;
    }

    public int getYear() {
        return year;
    }

    public void setYear(int year) {
        this.year = year;
    }

    public int getMonth() {
        return month;
    }

    public void setMonth(int month) {
        this.month = month;
    }

    public int getDay() {
        return day;
    }

    public void setDay(int day) {
        this.day = day;
    }

    /** Not-null value. */
    public String getTime() {
        return time;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTime(String time) {
        this.time = time;
    }

    public float getMoney() {
        return money;
    }

    public void setMoney(float money) {
        this.money = money;
    }

    /** Not-null value. */
    public String getRemark() {
        return remark;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setRemark(String remark) {
        this.remark = remark;
    }

    public Long getTypeId() {
        return typeId;
    }

    public void setTypeId(Long typeId) {
        this.typeId = typeId;
    }

    /** To-one relationship, resolved on first access. */
    public AccountType getAccountType() {
        Long __key = this.typeId;
        if (accountType__resolvedKey == null || !accountType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AccountTypeDao targetDao = daoSession.getAccountTypeDao();
            AccountType accountTypeNew = targetDao.load(__key);
            synchronized (this) {
                accountType = accountTypeNew;
            	accountType__resolvedKey = __key;
            }
        }
        return accountType;
    }

    public void setAccountType(AccountType accountType) {
        synchronized (this) {
            this.accountType = accountType;
            typeId = accountType == null ? null : accountType.getTypeId();
            accountType__resolvedKey = typeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

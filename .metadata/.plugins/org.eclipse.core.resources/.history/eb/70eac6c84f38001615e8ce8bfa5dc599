package com.johan.xnote.app.dialog;

import java.math.BigDecimal;
import java.util.List;

import com.johan.xnote.R;
import com.johan.xnote.api.model.Account;
import com.johan.xnote.api.model.AccountDao;
import com.johan.xnote.api.model.AccountType;
import com.johan.xnote.api.model.AccountTypeDao;
import com.johan.xnote.app.application.XNoteApplication;
import com.johan.xnote.app.view.AccountStatisticsView;

import android.app.Dialog;
import android.content.Context;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;

public class ShowAccountBarDialog {
	
	private Dialog showDialog;
	
	private AccountStatisticsView statisticsView;
	
	private Button but;
	
	public ShowAccountBarDialog(Context context, int year, int month) {
		showDialog = new Dialog(context, R.style.CustomDialog);
		showDialog.setContentView(R.layout.dialog_show_account_bar);
		statisticsView = (AccountStatisticsView) showDialog.findViewById(R.id.show_account_bar_view);
		but = (Button) showDialog.findViewById(R.id.show_account_bar_but);
		init(year, month);
		but.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				dismiss();
			}
		});
	}
	
	private void init(int year, int month) {
		AccountDao accountDao = XNoteApplication.getInstance().getDaoSession().getAccountDao();
		AccountTypeDao accountTypeDao = XNoteApplication.getInstance().getDaoSession().getAccountTypeDao();
		List<Account> accountList = accountDao.queryBuilder().where(AccountDao.Properties.Year.eq(year), AccountDao.Properties.Month.eq(month)).list();
		List<AccountType> accountTypeList = accountTypeDao.queryBuilder().list();
		float inMoney = 0, outMoney = 0;
		for(Account account : accountList) {
			for(AccountType accountType : accountTypeList) {
				if(accountType.getTypeId() == account.getAccountType().getTypeId()) {
					accountType.addMoney(account.getMoney());
				}
			}
			if(account.getAccountType().getIsOut()) {
				BigDecimal b1 = new BigDecimal(Float.toString(outMoney));
				BigDecimal b2 = new BigDecimal(Float.toString(account.getMoney()));
				outMoney += b1.add(b2).floatValue();
			} else {
				BigDecimal b1 = new BigDecimal(Float.toString(inMoney));
				BigDecimal b2 = new BigDecimal(Float.toString(account.getMoney()));
				inMoney += b1.add(b2).floatValue();
			}
		}
		for(AccountType accountType : accountTypeList) {
			if(accountType.getIsOut()) {
				statisticsView.insertData(accountType.getName(), (int)(accountType.getMoney() * 100 / outMoney), String.valueOf(accountType.getMoney()), true);
			} else {
				statisticsView.insertData(accountType.getName(), (int)(accountType.getMoney() * 100 / inMoney), String.valueOf(accountType.getMoney()), false);
			}
		}
	}

	public void show() {
		showDialog.show();
	}
	
	public void dismiss() {
		showDialog.dismiss();
	}
	
}

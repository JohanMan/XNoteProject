package com.johan.xnote.api.model;

import java.util.List;
import com.johan.xnote.api.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "ACCOUNT_TYPE".
 */
public class AccountType {

    private Long typeId;
    private boolean isOut;
    /** Not-null value. */
    private String name;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AccountTypeDao myDao;

    private List<Account> accounts;

    // KEEP FIELDS - put your custom fields here
    private float money;
    // KEEP FIELDS END

    public AccountType() {
    }

    public AccountType(Long typeId) {
        this.typeId = typeId;
    }

    public AccountType(Long typeId, boolean isOut, String name) {
        this.typeId = typeId;
        this.isOut = isOut;
        this.name = name;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAccountTypeDao() : null;
    }

    public Long getTypeId() {
        return typeId;
    }

    public void setTypeId(Long typeId) {
        this.typeId = typeId;
    }

    public boolean getIsOut() {
        return isOut;
    }

    public void setIsOut(boolean isOut) {
        this.isOut = isOut;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Account> getAccounts() {
        if (accounts == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AccountDao targetDao = daoSession.getAccountDao();
            List<Account> accountsNew = targetDao._queryAccountType_Accounts(typeId);
            synchronized (this) {
                if(accounts == null) {
                    accounts = accountsNew;
                }
            }
        }
        return accounts;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAccounts() {
        accounts = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public void addMoney(float money) {
    	BigDecimal b1 = new BigDecimal(Float.toString(this.money));
    	BigDecimal b2 = new BigDecimal(Float.toString(money));
    	this.money = b1.add(b2).floatValue();
    }
    public void setMoney(float money) {
    	this.money = money;
    }
    public float getMoney() {
    	return money;
    }
    // KEEP METHODS END

}

package com.johan.xnote.api.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.johan.xnote.api.model.Sticky;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STICKY".
*/
public class StickyDao extends AbstractDao<Sticky, Long> {

    public static final String TABLENAME = "STICKY";

    /**
     * Properties of entity Sticky.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EditTime = new Property(1, String.class, "editTime", false, "EDIT_TIME");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property IsRemind = new Property(3, boolean.class, "isRemind", false, "IS_REMIND");
        public final static Property RemindTime = new Property(4, Long.class, "remindTime", false, "REMIND_TIME");
        public final static Property Color = new Property(5, String.class, "color", false, "COLOR");
    };


    public StickyDao(DaoConfig config) {
        super(config);
    }
    
    public StickyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STICKY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EDIT_TIME\" TEXT NOT NULL ," + // 1: editTime
                "\"CONTENT\" TEXT NOT NULL ," + // 2: content
                "\"IS_REMIND\" INTEGER NOT NULL ," + // 3: isRemind
                "\"REMIND_TIME\" INTEGER," + // 4: remindTime
                "\"COLOR\" TEXT NOT NULL );"); // 5: color
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STICKY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Sticky entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getEditTime());
        stmt.bindString(3, entity.getContent());
        stmt.bindLong(4, entity.getIsRemind() ? 1L: 0L);
 
        Long remindTime = entity.getRemindTime();
        if (remindTime != null) {
            stmt.bindLong(5, remindTime);
        }
        stmt.bindString(6, entity.getColor());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Sticky readEntity(Cursor cursor, int offset) {
        Sticky entity = new Sticky( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // editTime
            cursor.getString(offset + 2), // content
            cursor.getShort(offset + 3) != 0, // isRemind
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // remindTime
            cursor.getString(offset + 5) // color
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Sticky entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEditTime(cursor.getString(offset + 1));
        entity.setContent(cursor.getString(offset + 2));
        entity.setIsRemind(cursor.getShort(offset + 3) != 0);
        entity.setRemindTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setColor(cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Sticky entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Sticky entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.johan.xnote.api.model;

import com.johan.xnote.api.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "NOTE".
 */
public class Note {

    private Long noteId;
    /** Not-null value. */
    private String time;
    /** Not-null value. */
    private String title;
    /** Not-null value. */
    private String body;
    private Long bookId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient NoteDao myDao;

    private NoteBook noteBook;
    private Long noteBook__resolvedKey;


    public Note() {
    }

    public Note(Long noteId) {
        this.noteId = noteId;
    }

    public Note(Long noteId, String time, String title, String body, Long bookId) {
        this.noteId = noteId;
        this.time = time;
        this.title = title;
        this.body = body;
        this.bookId = bookId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNoteDao() : null;
    }

    public Long getNoteId() {
        return noteId;
    }

    public void setNoteId(Long noteId) {
        this.noteId = noteId;
    }

    /** Not-null value. */
    public String getTime() {
        return time;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTime(String time) {
        this.time = time;
    }

    /** Not-null value. */
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(String title) {
        this.title = title;
    }

    /** Not-null value. */
    public String getBody() {
        return body;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBody(String body) {
        this.body = body;
    }

    public Long getBookId() {
        return bookId;
    }

    public void setBookId(Long bookId) {
        this.bookId = bookId;
    }

    /** To-one relationship, resolved on first access. */
    public NoteBook getNoteBook() {
        Long __key = this.bookId;
        if (noteBook__resolvedKey == null || !noteBook__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            NoteBookDao targetDao = daoSession.getNoteBookDao();
            NoteBook noteBookNew = targetDao.load(__key);
            synchronized (this) {
                noteBook = noteBookNew;
            	noteBook__resolvedKey = __key;
            }
        }
        return noteBook;
    }

    public void setNoteBook(NoteBook noteBook) {
        synchronized (this) {
            this.noteBook = noteBook;
            bookId = noteBook == null ? null : noteBook.getBookId();
            noteBook__resolvedKey = bookId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

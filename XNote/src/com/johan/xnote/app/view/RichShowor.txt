package com.johan.xnote.app.view;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Build;
import android.util.AttributeSet;
import android.webkit.WebChromeClient;
import android.webkit.WebView;
import android.webkit.WebViewClient;

/**
 * Copyright (C) 2016 fengyihuan
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
public class RichShowor extends WebView {
	
	private static final String SETUP_HTML = "file:///android_asset/showor.html";
	
	private boolean isReady = false;
	
	private Context context;

	public RichShowor(Context context) {
		this(context, null);
	}

	public RichShowor(Context context, AttributeSet attrs) {
		this(context, attrs, android.R.attr.webViewStyle);
	}
	
	@SuppressLint("SetJavaScriptEnabled")
	public RichShowor(Context context, AttributeSet attrs, int defStyleAttr) {
		super(context, attrs, defStyleAttr);
		this.context = context;
		setVerticalScrollBarEnabled(false);
		setHorizontalScrollBarEnabled(false);
		getSettings().setJavaScriptEnabled(true);
		setWebChromeClient(new WebChromeClient());
		setWebViewClient(createWebviewClient());
		loadUrl(SETUP_HTML);
	}
	
	public void setFontColor(int color) {
		String hex = convertHexColorString(color);
		exec("javascript:RS.setBaseTextColor('" + hex + "');");
	}
	
	public void setFontSize(int px) {
		exec("javascript:RS.setBaseFontSize('" + px + "px');");
	}
	
	@Override
	public void setPadding(int left, int top, int right, int bottom) {
		super.setPadding(left, top, right, bottom);
		exec("javascript:RS.setPadding('" + left + "px', '" + top + "px', '" + right + "px', '" + bottom + "px');");
	}
	
	private String convertHexColorString(int color) {
		return String.format("#%06X", (0xFFFFFF & color));
	}
	
	protected EditorWebViewClient createWebviewClient() {
		return new EditorWebViewClient();
	}
	
	public void setHtml(String contents) {
		if (contents == null) {
			contents = "";
		}
		try {
			exec("javascript:RS.setHtml('" + URLEncoder.encode(contents, "UTF-8") + "');");
		} catch (UnsupportedEncodingException e) {
			// No handling
		}
	}
	
	protected void exec(final String trigger) {
		if (isReady) {
			load(trigger);
		} else {
			postDelayed(new Runnable() {
				@Override
				public void run() {
					exec(trigger);
				}
			}, 100);
		}
	}

	@SuppressLint("NewApi")
	private void load(String trigger) {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
			evaluateJavascript(trigger, null);
		} else {
			loadUrl(trigger);
		}
	}
	
	protected class EditorWebViewClient extends WebViewClient {
		@Override
		public void onPageFinished(WebView view, String url) {
			isReady = url.equalsIgnoreCase(SETUP_HTML);
		}
		@Override
		public boolean shouldOverrideUrlLoading(WebView view, String url) {
			Uri uri = Uri.parse(url);  
			Intent intent = new Intent(Intent.ACTION_VIEW, uri);  
			context.startActivity(intent);
			return true;
		}
	}
	
}

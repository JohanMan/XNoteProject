package com.johan.xnote.core.util;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Environment;

public class FileUtil {
	
	public static final String PROJECT_PATH = "xnote/";
	public static final String TEMP_IMG_PATH = PROJECT_PATH + "tmp_img/";
	public static final String ACCOUNT_PATH = "X账本/";

	public static boolean hasSDCard() {
    	return Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState());
    }
	
	public static String getSDPath() {
		return Environment.getExternalStorageDirectory() + "/";
	}
	
	public static void createDir(String path) {
		File dir = new File(path);
		if(dir.exists() && dir.isDirectory()) {
			return;
		}
		dir.mkdirs();
	}
	
	public static SaveImage saveBitmap(Bitmap bitmap)  {
		if(!hasSDCard()) return null;
		createDir(getSDPath() + TEMP_IMG_PATH);
		String imagePath = getSDPath() + TEMP_IMG_PATH + "IMG_" + String.valueOf(System.currentTimeMillis()).substring(4) + ".jpg";
        File image = new File(imagePath);
        FileOutputStream os = null;
        try {
        	os = new FileOutputStream(image);
        	bitmap.compress(Bitmap.CompressFormat.JPEG, 100, os);
        	return new SaveImage(imagePath, bitmap.getWidth(), bitmap.getHeight());
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } finally {
        	if(null != os) {
	        	try {
					os.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        }
        return null;
	}
	
	public static class SaveImage implements Serializable {
		private static final long serialVersionUID = 1L;
		public String path;
		public int width;
		public int height;
		public SaveImage(String path, int width, int height) {
			this.path = path;
			this.width = width;
			this.height = height;
		}
	}
	
	/**
     * 通过uri获取图片并进行压缩
     *
     * @param uri
     */
    public static Bitmap getBitmapFormUri(Activity acticity, Uri uri) throws FileNotFoundException, IOException {
        InputStream input = acticity.getContentResolver().openInputStream(uri);
        BitmapFactory.Options onlyBoundsOptions = new BitmapFactory.Options();
        onlyBoundsOptions.inJustDecodeBounds = true;
        onlyBoundsOptions.inDither = true;//optional
        onlyBoundsOptions.inPreferredConfig = Bitmap.Config.ARGB_8888;//optional
        BitmapFactory.decodeStream(input, null, onlyBoundsOptions);
        input.close();
        int originalWidth = onlyBoundsOptions.outWidth;
        int originalHeight = onlyBoundsOptions.outHeight;
        if ((originalWidth == -1) || (originalHeight == -1))
            return null;
        //图片分辨率以480x800为标准
        float hh = 800f;//这里设置高度为800f
        float ww = 480f;//这里设置宽度为480f
        //缩放比。由于是固定比例缩放，只用高或者宽其中一个数据进行计算即可
        int be = 1;//be=1表示不缩放
        if (originalWidth > originalHeight && originalWidth > ww) {//如果宽度大的话根据宽度固定大小缩放
            be = (int) (originalWidth / ww);
        } else if (originalWidth < originalHeight && originalHeight > hh) {//如果高度高的话根据宽度固定大小缩放
            be = (int) (originalHeight / hh);
        }
        if (be <= 0)
            be = 1;
        //比例压缩
        BitmapFactory.Options bitmapOptions = new BitmapFactory.Options();
        bitmapOptions.inSampleSize = be;//设置缩放比例
        bitmapOptions.inDither = true;//optional
        bitmapOptions.inPreferredConfig = Bitmap.Config.ARGB_8888;//optional
        input = acticity.getContentResolver().openInputStream(uri);
        Bitmap bitmap = BitmapFactory.decodeStream(input, null, bitmapOptions);
        input.close();
        return compressImage(bitmap);//再进行质量压缩
    }
    
    /**
     * 质量压缩方法
     *
     * @param image
     * @return
     */
    public static Bitmap compressImage(Bitmap image) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        image.compress(Bitmap.CompressFormat.JPEG, 100, baos);//质量压缩方法，这里100表示不压缩，把压缩后的数据存放到baos中
        int options = 100;
        while (baos.toByteArray().length / 1024 > 100) {  //循环判断如果压缩后图片是否大于100kb,大于继续压缩
            baos.reset();//重置baos即清空baos
            //第一个参数 ：图片格式 ，第二个参数： 图片质量，100为最高，0为最差  ，第三个参数：保存压缩后的数据的流
            image.compress(Bitmap.CompressFormat.JPEG, options, baos);//这里压缩options%，把压缩后的数据存放到baos中
            options -= 10;//每次都减少10
        }
        ByteArrayInputStream isBm = new ByteArrayInputStream(baos.toByteArray());//把压缩后的数据baos存放到ByteArrayInputStream中
        Bitmap bitmap = BitmapFactory.decodeStream(isBm, null, null);//把ByteArrayInputStream数据生成图片
        return bitmap;
    }
	
}
